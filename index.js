//socket.io is nothing but a library which is used to create a real time application
//it provide a way to communicate between client users
//it doesn't interact with databases and express js server
//it initialise their own server.
//it only interact with client, it doesn't do anything with databases i.e. manipulation of database
//command to install : npm i socket.io

//import Server from socket.io
import { Server } from "socket.io";
import dotenv from "dotenv";

//config dotenv
dotenv.config();

// create a io circuit on Server or create an instance of server
const io = new Server(process.env.PORT, {
  cors: { origin: process.env.APP_URL },
});

//when circuit will be created, the user will be added from the frontend as a socket with their own socket id
//define the actions and functions which will be performed on the socket  when any socket will be connected to io circuit

let activeUsers = [];

io.on("connection", (socket) => {
  //socket is the user who is connected

  //whenever user open the chat screen on client, a event i.e. add-me-active-users-list event trigged and users will be added in active users list .

  //add-me-active-users-list event handle . this event accept userId argument
  socket.on("add-me-active-users-list", (userId) => {
    //check users is already added in active users or not
    const userExist = activeUsers.some((user) => user.userId === userId);
    //if user doesn't exist then added user in active user with their socket id, which automatically generated by socket.io
    if (!userExist) {
      activeUsers.push({ userId, socketId: socket.id });
    }
    //emit activeUsers list to all users
    io.emit("get-active-users-list", activeUsers);
  });

  //if user disconnect from the chat screen, then remove user from active users list
  socket.on("disconnect", () => {
    activeUsers = activeUsers.filter((curr) => curr.socketId !== socket.id); //socket.id returns the connected socket id
    //emit activeUsers list to all users
    io.emit("get-active-users-list", activeUsers);
  });

  //when user send a message, then it triggered an event i.e. send message with a message
  socket.on("send-message", (data) => {
    //data contains reciverId
    const { recieverId } = data;
    //check reciever is in active users or not. if it it then trigged and event to that user
    const userExist = activeUsers.find((user) => user.userId === recieverId);
    if (userExist) {
      //triggered an event to that user
      io.to(userExist.socketId).emit("recieve-message", data);
    }
  });
});
